概念1.在linux内核中 所有控制器的设备树 都已经编写好了 只需要将led和控制器对接即可2.节点的别名rgb_led_r: rgb-led-r {};aliases{	rgb_led_r= &rgb-led-r;};3.节点引用rgb_led_r= &rgb-led-r;同名节点会被合并  同名属性会被覆盖设备数储存时  对于32位64位的整数 采用大端存储 其他非整数类型  会按照原始字节序存储设备数分析gpio3: gpio@fe760000 {//节点名	compatible = "rockchip,gpio-bank"; //厂商名  设备名	reg = <0x0 0xfe760000 0x0 0x100>; //地址  0x0 0xfe760000控制器地址   0x0 0x100地址范围	interrupts = <GIC_SPI 36 IRQ_TYPE_LEVEL_HIGH>;//中断	clocks = <&cru PCLK_GPIO3>, <&cru DBCLK_GPIO3>;//时钟	gpio-controller;//标识	#gpio-cells = <2>;//描述子节点个数	gpio-ranges = <&pinctrl 0 96 32>; //引脚范围 &pinctrl 引用pinctrl节点 0    96 GPIO起始序号  32引脚范围	interrupt-controller;	#interrupt-cells = <2>;//描述子节点个数};gpio属性命名规则GPIO属性应该是以[<name>-]gpios命名，其中name是可选参数 标识gpio的目的或者功能例如：enable-gpios = <&gpio2 2>;内核帮助文档路径/home/ubuntu/work/linux/kernel/Documentation/devicetree/bindings/gpio/gpio节点实例解析node {	enable-gpios = <&qe_pio_e 18 GPIO_ACTIVE_HIGH>;};enable-gpios   符合命名规范的键   &qe_pio_e   引用 qe_pio_e控制器18   引脚编号   GPIO_ACTIVE_HIGH   引脚特性  其定义在  /dt-bindings/gpio/gpio.hGPIO子系统 相关api1.内核子系统三层概念user			逻辑代码—————————————————————————————————————————————			设备驱动层       通过各个子系统  完成对硬件的操作 并向上层提供接口                              驱动工程师			______________________________________________________________________________kernel			核心层      屏蔽底层细节          向上层提供接口  各类子系统api               内核工程师			———————————————————————————————————————			厂商驱动层   各个厂商针对不同硬件的操作  包括内存映射     						厂商—————————————————————————————————————————————HARDWARE		motor  led  2.相关apistatic inline int of_get_named_gpio(struct device_node *np, const char *propname, int index)功能：获取gpio编号参数：		np 结构体指针		propname 属性名		index 编号返回值：		成功 返回gpio编号		失败 返回错误码static inline int gpio_request(unsigned gpio, const char *label)功能：申请gpio参数：		gpio   GPIO编号		label  标签 NULL返回值：		成功 返回0		失败 返回错误码static inline int gpio_direction_input(unsigned gpio)功能：设置gpio为输入参数：		gpio   GPIO编号返回值：		成功 返回0		失败 返回错误码static inline int gpio_direction_output(unsigned gpio, int value)功能：设置gpio为输出参数：		gpio   GPIO编号		value  输出电平       1高电平     0是低电平返回值：		成功 返回0		失败 返回错误码static inline void gpio_set_value(unsigned int gpio, int value)功能：设置gpio输出电平参数：		gpio   GPIO编号		value  输出电平       1高电平     0是低电平返回值：		成功 返回0		失败 返回错误码static inline int gpio_get_value(unsigned int gpio)功能：获取gpio电平状态参数：		gpio   GPIO编号返回值：		1  是高电平		0  是低电平static inline void gpio_free(unsigned gpio)功能：释放gpio参数：		gpio   GPIO编号返回值：		无				1  是高电平		0  是低电平3.节点获取相关api和知识点device_node 结构体讲解struct device_node {	const char *name;  //节点名	#const char *type;  //节点类型	#phandle phandle; //唯一标识	const char *full_name;  //节点全名	#struct fwnode_handle fwnode; //用于支持不同设备	struct	property *properties;  //设备数属性键值对的链表	#struct	property *deadprops;	/* removed properties */ 链表头	struct	device_node *parent; //父节点	struct	device_node *child;  //子节点	struct	device_node *sibling; //兄弟节点#if defined(CONFIG_OF_KOBJ)	#struct	kobject kobj;//内核对象#endif	#unsigned long _flags;//状态标志	#void	*data;//节点相关的私有数据#if defined(CONFIG_SPARC)	#const char *path_component_name;//表示设备节点路径的一部分	#unsigned int unique_id;//唯一ID	#struct of_irq_controller *irq_trans;//中断控制器结构体指针#endif};property结构体struct property {	char	*name;//键的名字	int	length;  //值长度	void	*value; //值  注意  强转	struct property *next; //下一个键值对的property结构体指针};4. 节点获取相关APIstatic inline struct device_node *of_find_node_by_path(const char *path)功能：通过路径获取节点参数：		path  路径  "/myled"返回值：		成功 返回结构体首地址		失败 返回NULLstatic inline struct device_node *of_find_node_by_name(struct device_node *from,const char *name)功能：通过节点名获取节点参数：		from 填NULL 从根节点搜索		name 节点名返回值：		成功 返回结构体首地址		失败 返回NULLstatic inline struct device_node *of_find_compatible_node(struct device_node *fromconst char *type,const char *compat)功能：通过compatible获取节点参数：		from 填NULL 从根节点搜索		type 填NUL		compat 厂商名 设备名返回值：		成功 返回结构体首地址		失败 返回NULL获取属性相关的APIstatic inline struct property *of_find_property(const struct device_node *np,const char *name,int *lenp)功能：获取键值对参数：		np device_node结构体首地址		name 键的名字		lenp 值的长度 单位字节返回值：		成功 返回结构体首地址		失败 返回NULLstatic inline int of_property_read_u8_array(const struct device_node *np,const char *propname, u8 *out_values, size_t sz)功能：获取单字节数据数组参数：		np device_node结构体首地址		propname 键的名字		out_values 获取到的数据		sz 值的个数返回值：		成功 返回0		失败 返回错误码static inline int of_property_read_u32_index(const struct device_node *np,const char *propname, u32 index, u32 *out_value)功能：获取32位数值参数：		np device_node结构体首地址		propname 键的名字		index 索引号 下标		out_values 获取到的数据返回值：		成功 返回0		失败 返回错误码static inline int of_property_read_string(const struct device_node *np, const char *propname, const char **out_string)功能：获取字符串参数：		np device_node结构体首地址		propname 键的名字		index 索引号 下标		out_string 获取到的字符串返回值：		成功 返回0		失败 返回错误码